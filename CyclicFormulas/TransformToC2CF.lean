import CyclicFormulas.Dual
import CyclicFormulas.Formula
import Mathlib.Init.Data.Subtype.Basic

open C2CP C2CF Sum Sum3

def G_p (n : Nat) : C2CF' where
  V       := Fin 1
  E _ _   := False
  vI      := 0

def ùîæ_p (n : Nat) : C2CF where
  toC2CF' := G_p n
  L _     := .prop (n + 1)
  no_cm _ _ := not_false

  Œ© _     := .o
  colouring := (forall_const _).mpr trivial
  monochrome _ _ | .single a => False.elim a

  succ _           := none
  lit_succ _ _ _   := not_false
  prg_succ _ _     := False.elim
  or_succ _ _ _ _  := False.elim
  and_succ _ _ _ _ := False.elim

def G_np : Nat ‚Üí C2CF' := ‚àÇG_p

def ùîæ_np : Nat ‚Üí C2CF := ‚àÇùîæ_p

def G_or (GœÜ Gœà : C2CF') : C2CF' where
  V := Fin 1 ‚äï GœÜ ‚äï Gœà
  V_fin := FinEnum.sum

  E
  | in‚ÇÄ _, in‚ÇÅ w => w = GœÜ.vI
  | in‚ÇÄ _, in‚ÇÇ w => w = Gœà.vI
  | in‚ÇÅ v, in‚ÇÅ w => GœÜ.E v w
  | in‚ÇÇ v, in‚ÇÇ w => Gœà.E v w
  | _, _         => False

  E_dec
  | in‚ÇÄ _, in‚ÇÅ _ => decEq ..
  | in‚ÇÄ _, in‚ÇÇ _ => decEq ..
  | in‚ÇÅ _, in‚ÇÅ _ => GœÜ.E_dec ..
  | in‚ÇÇ _, in‚ÇÇ _ => Gœà.E_dec ..
  | in‚ÇÄ _, in‚ÇÄ _ => isFalse not_false
  | in‚ÇÅ _, in‚ÇÄ _ => isFalse not_false
  | in‚ÇÅ _, in‚ÇÇ _ => isFalse not_false
  | in‚ÇÇ _, in‚ÇÄ _ => isFalse not_false
  | in‚ÇÇ _, in‚ÇÅ _ => isFalse not_false

  vI := inl default

namespace Sum3
  def is‚ÇÄ : Œ± ‚äï Œ≤ ‚äï Œ≥ ‚Üí Prop
  | in‚ÇÄ _ => True
  | in‚ÇÅ _ => False
  | in‚ÇÇ _ => False

  def is‚ÇÅ : Œ± ‚äï Œ≤ ‚äï Œ≥ ‚Üí Prop
  | in‚ÇÄ _ => False
  | in‚ÇÅ _ => True
  | in‚ÇÇ _ => False

  def is‚ÇÇ : Œ± ‚äï Œ≤ ‚äï Œ≥ ‚Üí Prop
  | in‚ÇÄ _ => False
  | in‚ÇÅ _ => False
  | in‚ÇÇ _ => True

  def get‚ÇÅ (b : Œ± ‚äï Œ≤ ‚äï Œ≥) (_ : is‚ÇÅ b) : Œ≤ := (match b with | in‚ÇÅ b‚ÇÅ => b‚ÇÅ)

  def get‚ÇÇ (c : Œ± ‚äï Œ≤ ‚äï Œ≥) (_ : is‚ÇÇ c) : Œ≥ := (match c with | in‚ÇÇ b‚ÇÇ => b‚ÇÇ)


  theorem in‚ÇÅ_get‚ÇÅ : (b : Œ± ‚äï Œ≤ ‚äï Œ≥) ‚Üí (h : is‚ÇÅ b) ‚Üí b = in‚ÇÅ (get‚ÇÅ b h)
    | in‚ÇÅ _, _ => rfl

end Sum3

namespace G_or
lemma ncrossl {GœÜ Gœà : C2CF'} {x‚ÇÅ : GœÜ} {y : Fin 1 ‚äï GœÜ ‚äï Gœà} (h : TC' (G_or GœÜ Gœà).E (in‚ÇÅ x‚ÇÅ) y) : Sum3.is‚ÇÅ y := by
  induction h with
  | @single z => rcases z with (_ | ‚ü®_ | _‚ü©) <;> trivial
  | @tail y z r _ _ => rcases z with (_ | ‚ü®_ | _‚ü©) <;> rcases y with (_ | ‚ü®_ | _‚ü©) <;> trivial

lemma ncrossr {GœÜ Gœà : C2CF'} {x‚ÇÇ : Gœà} {y : Fin 1 ‚äï GœÜ ‚äï Gœà} (h : TC' (G_or GœÜ Gœà).E (in‚ÇÇ x‚ÇÇ) y) : is‚ÇÇ y := by
  induction h with
  | @single z => rcases z with (_ | ‚ü®_ | _‚ü©) <;> trivial
  | @tail y z r _ _ => rcases z with (_ | ‚ü®_ | _‚ü©) <;> rcases y with (_ | ‚ü®_ | _‚ü©) <;> trivial

lemma castl {GœÜ Gœà : C2CF'} {y : Fin 1 ‚äï GœÜ ‚äï Gœà} {x : GœÜ} (h : TC' (G_or GœÜ Gœà).E (in‚ÇÅ x) y) (left : is‚ÇÅ y) :
  TC' GœÜ.E x <| get‚ÇÅ y left := by
    induction h with
    | @single z a => rcases z with (_ | ‚ü®_ | _‚ü©) <;> first | trivial | exact .single a
    | @tail y' z r a ih =>
      rcases z with (z‚ÇÄ | ‚ü®z‚ÇÅ | z‚ÇÇ‚ü©) <;> rcases y' with (y‚ÇÄ | ‚ü®y‚ÇÅ | y‚ÇÇ‚ü©) <;> try trivial
      . have contra := ncrossl r; simp only [is‚ÇÅ] at contra
      . exact .tail (ih trivial) a

-- lemma rcastl {GœÜ Gœà : C2CF'} {x y : GœÜ} (h : RTC (G_or GœÜ Gœà).E (in‚ÇÅ x) (in‚ÇÅ y)) : RTC GœÜ.E x y := by
--   cases h; exact .refl
--   rename_i z p a
--   match z with
--   | in‚ÇÅ z => exact Relation.ReflTransGen.tail (rcastl p) a
--   | in‚ÇÄ z => sorry
-- termination_by sizeOf h

-- match h with
--   | .refl => .refl
--   | .tail p a => by
--     rename (G_or _ _).V => z
--     match z with
--     | in‚ÇÄ z => sorry
--     | in‚ÇÅ z => exact Relation.ReflTransGen.tail (rcastl p) a

lemma castr {GœÜ Gœà : C2CF'} {y : Fin 1 ‚äï GœÜ ‚äï Gœà} {x : Gœà} (h : TC' (G_or GœÜ Gœà).E (in‚ÇÇ x) y) (right : is‚ÇÇ y):
  TC' Gœà.E x <| get‚ÇÇ y right := by
    induction h with
    | @single z a => rcases z with (_ | ‚ü®_ | _‚ü©) <;> first | trivial | exact .single a
    | @tail y' z r a ih =>
      rcases z with (z‚ÇÄ | ‚ü®z‚ÇÅ | z‚ÇÇ‚ü©) <;> rcases y' with (y‚ÇÄ | ‚ü®y‚ÇÅ | y‚ÇÇ‚ü©) <;> try trivial
      . have contra := ncrossr r; simp only [is‚ÇÇ] at contra
      . exact .tail (ih trivial) a

lemma lift_pathl {GœÜ Gœà : C2CF'} {x y : GœÜ} (p : RTC GœÜ.E x y) : RTC (G_or GœÜ Gœà).E (in‚ÇÅ x) (in‚ÇÅ y) := by
  induction p with
  | refl => exact .refl
  | tail _ a p' => exact .tail p' a

lemma lift_pathr {GœÜ Gœà : C2CF'} {x y : Gœà} (p : RTC Gœà.E x y) : RTC (G_or GœÜ Gœà).E (in‚ÇÇ x) (in‚ÇÇ y) := by
  induction p with
  | refl => exact .refl
  | tail _ a p' => exact .tail p' a

end G_or

open G_or

def ùîæ_or (ùîæœÜ ùîæœà : C2CF) : C2CF where
  toC2CF' := G_or ùîæœÜ.toC2CF' ùîæœà.toC2CF'

  L
  | in‚ÇÄ _ => Label.or
  | in‚ÇÅ x => ùîæœÜ.L x
  | in‚ÇÇ y => ùîæœà.L y

  no_cm := sorry

  Œ©
  | in‚ÇÄ _ => Colour.o
  | in‚ÇÅ x => ùîæœÜ.Œ© x
  | in‚ÇÇ y => ùîæœà.Œ© y

  lit_succ := by
    rintro (z | ‚ü®vl | vr‚ü©) (z' | ‚ü®wl | wr‚ü©) p
    <;> simp_all [G_or]
    . apply ùîæœÜ.lit_succ _ _ p
    . apply ùîæœà.lit_succ _ _ p

  succ
  | in‚ÇÄ _ => none
  | in‚ÇÅ v => .map in‚ÇÅ <| ùîæœÜ.succ v
  | in‚ÇÇ v => .map in‚ÇÇ <| ùîæœà.succ v

  prg_succ
  | in‚ÇÅ _, in‚ÇÅ _, p => fun a => (congr_arg _ (ùîæœÜ.prg_succ _ _ p a)).trans Option.map_coe
  | in‚ÇÇ _, in‚ÇÇ _, p => fun a => (congr_arg _ (ùîæœà.prg_succ _ _ p a)).trans Option.map_coe
  | in‚ÇÅ _, in‚ÇÄ _, _ => False.elim
  | in‚ÇÇ _, in‚ÇÄ _, _ => False.elim
  | in‚ÇÅ _, in‚ÇÇ _, _ => False.elim
  | in‚ÇÇ _, in‚ÇÅ _, _ => False.elim

  or_succ v w l c a np := match v, w with
    | in‚ÇÅ v, in‚ÇÅ w => congr_arg (Option.map _) <| ùîæœÜ.or_succ v w l c a <| sorry
    | in‚ÇÇ v, in‚ÇÇ w => congr_arg (Option.map _) <| ùîæœà.or_succ v w l c a <| sorry

  and_succ v w l c a np := match v, w with
    | in‚ÇÅ v, in‚ÇÅ w => congr_arg (Option.map _) <| ùîæœÜ.and_succ v w l c a <| sorry
    | in‚ÇÇ v, in‚ÇÇ w => congr_arg (Option.map _) <| ùîæœà.and_succ v w l c a <| sorry

  colouring
  | in‚ÇÄ _ => trivial
  | in‚ÇÅ v => ùîæœÜ.colouring v
  | in‚ÇÇ v => ùîæœà.colouring v

  monochrome
    | in‚ÇÄ x, in‚ÇÄ y => (match . with | .single a => False.elim a)
    | in‚ÇÄ x, in‚ÇÅ y => fun _ => (match . with | .single a => False.elim a)
    | in‚ÇÄ x, in‚ÇÇ y => fun _ => (match . with | .single a => False.elim a)
    | in‚ÇÅ x, in‚ÇÄ y => (match . with | .single a => False.elim a)
    | in‚ÇÇ x, in‚ÇÄ y => (match . with | .single a => False.elim a)
    | in‚ÇÅ x, in‚ÇÇ y => (False.elim <| ncrossl .)
    | in‚ÇÇ x, in‚ÇÅ y => (False.elim <| ncrossr .)
    | in‚ÇÅ x, in‚ÇÅ y => fun vw wv => ùîæœÜ.monochrome x y (castl vw trivial) (castl wv trivial)
    | in‚ÇÇ x, in‚ÇÇ y => fun vw wv => ùîæœà.monochrome x y (castr vw trivial) (castr wv trivial)

def G_and (GœÜ Gœà : C2CF') : C2CF' := ‚àÇ(G_or ‚àÇGœÜ ‚àÇGœà)

def ùîæ_and (ùîæœÜ ùîæœà : C2CF) : C2CF := ‚àÇ(ùîæ_or ‚àÇùîæœÜ ‚àÇùîæœà)

@[simp]
def G_dim (HŒ± : C2CP') (GœÜ : C2CF') : C2CF' where
  V := {v : HŒ± ‚äï GœÜ // v ‚â† inl HŒ±.vF}
  V_fin := FinEnum.Subtype.finEnum (. ‚â† inl HŒ±.vF)

  E
  | ‚ü®inr v, _‚ü©, ‚ü®inr w, _‚ü© => GœÜ.E v w
  | ‚ü®inl v, _‚ü©, ‚ü®inl w, _‚ü© => HŒ±.E v w
  | ‚ü®inl v, _‚ü©, ‚ü®inr w, _‚ü© => HŒ±.E v HŒ±.vF ‚àß w = GœÜ.vI
  | ‚ü®inr _, _‚ü©, ‚ü®inl _, _‚ü© => False

  E_dec
  | ‚ü®inr _, _‚ü©, ‚ü®inr _, _‚ü© => GœÜ.E_dec ..
  | ‚ü®inl _, _‚ü©, ‚ü®inl _, _‚ü© => HŒ±.E_dec ..
  | ‚ü®inl _, _‚ü©, ‚ü®inr _, _‚ü© => And.decidable
  | ‚ü®inr _, _‚ü©, ‚ü®inl _, _‚ü© => decidableFalse

  vI := ‚ü®inl HŒ±.vI, Function.Injective.ne inl_injective HŒ±.i_ne_f‚ü©

def ùîæ_dim (‚ÑçŒ± : C2CP) (ùîæœÜ : C2CF) : C2CF where
  toC2CF' := G_dim ‚ÑçŒ± ùîæœÜ

  L
  | ‚ü®inr v, _‚ü© => ùîæœÜ.L v
  | ‚ü®inl v, _‚ü© => ‚ÑçŒ±.L v

  no_cm := sorry

  Œ©
  | ‚ü®inr v, _‚ü© => ùîæœÜ.Œ© v
  | ‚ü®inl v, _‚ü© => ‚ÑçŒ±.Œ© v

  succ
  | ‚ü®inr v, _‚ü© => (‚ü®inr ., inr_ne_inl‚ü©) <$> ùîæœÜ.succ v
  | ‚ü®inl v, _‚ü© => match ‚ÑçŒ±.succ v with
    | none => none
    | some w => dite (w ‚â† ‚ÑçŒ±.vF)
      (some ‚ü®inl w, by simp [.]‚ü©)
      (fun _ => some ‚ü®inr ùîæœÜ.vI, inr_ne_inl‚ü©)

  lit_succ
  | ‚ü®inr _, _‚ü©, ‚ü®inr _, _‚ü©, p => ùîæœÜ.lit_succ _ _ p
  | ‚ü®inl _, _‚ü©, ‚ü®inl _, _‚ü©, p => ‚ÑçŒ±.lit_succ _ _ p
  | ‚ü®inl _, _‚ü©, ‚ü®inr _, _‚ü©, p => not_and_of_not_left _ (‚ÑçŒ±.lit_succ _ _ p)
  | ‚ü®inr _, _‚ü©, ‚ü®inl _, _‚ü©, _ => not_false

  colouring
  | ‚ü®inr v, _‚ü© => ùîæœÜ.colouring v
  | ‚ü®inl v, _‚ü© => ‚ÑçŒ±.colouring v

  monochrome := sorry

  prg_succ
  | ‚ü®inr _, _‚ü©, ‚ü®inr _, _‚ü©, p => (by simp [ùîæœÜ.prg_succ _ _ p .])
  | ‚ü®inl _, _‚ü©, ‚ü®inl _, _‚ü©, p => have := ‚ÑçŒ±.prg_succ _ _ p; by aesop
  | ‚ü®inl _, _‚ü©, ‚ü®inr _, _‚ü©, p => have := ‚ÑçŒ±.prg_succ _ _ p; by aesop
  | ‚ü®inr _, _‚ü©, ‚ü®inl _, _‚ü©, _ => False.elim

  or_succ := sorry
  and_succ := sorry

def G_box (HŒ± : C2CP') (GœÜ : C2CF') : C2CF' := ‚àÇ(G_dim HŒ± ‚àÇGœÜ)

def ùîæ_box (‚ÑçŒ± : C2CP) (ùîæœÜ : C2CF) : C2CF := ‚àÇ(ùîæ_dim ‚ÑçŒ± ‚àÇùîæœÜ)

@[simp]
def HA (n : Nat) : C2CP' where
  V := Bool
  E := (. && !.)
  vI := true
  vF := false
  i_ne_f := Bool.noConfusion

def ‚ÑçA (n : Nat) : C2CP where
  toC2CF' := HA n
  vF := (HA n).vF
  i_ne_f := (HA n).i_ne_f

  L := (bif . then .dim_atom n else .prop 0)
  no_cm v _ _ := nomatch v

  Œ© _ := .o
  LŒ©f := by simp only [HA, cond_false, and_self]

  succ := (bif . then some false else none)
  lit_succ := by simp
  prg_succ := by simp
  or_succ v _ _ := nomatch v
  and_succ v _ _ := nomatch v

  colouring := by simp
  monochrome v w vw wv :=
    have h : ¬¨ TC' (HA n).E false true := (match . with | .single a => by simp only [HA, Bool.not_true, Bool.and_self] at a)
    match v, w with
    | true, true   => by cases vw <;> simp_all
    | true, false  => absurd wv h
    | false, true  => absurd vw h
    | false, false => by cases vw <;> simp_all [TC']

  Œ©X := by simp
  LX := by simp
  andX := by simp

def H_comp (HŒ± HŒ≤ : C2CP') : C2CP' := ‚ü®
    G_dim HŒ± HŒ≤,
    ‚ü®inr HŒ≤.vF, inr_ne_inl‚ü©,
    by simp only [G_dim, ne_eq, Subtype.mk.injEq, not_false_eq_true]
  ‚ü©

def ‚Ñç_comp (‚ÑçŒ± ‚ÑçŒ≤ : C2CP) : C2CP where
  toC2CF' := H_comp ‚ÑçŒ± ‚ÑçŒ≤
  vF := (H_comp ‚ÑçŒ± ‚ÑçŒ≤).vF
  i_ne_f := (H_comp ‚ÑçŒ± ‚ÑçŒ≤).i_ne_f
  LŒ©f := LŒ©f _
  no_cm v ne_f := sorry

  succ := (ùîæ_dim ‚ÑçŒ± ‚ÑçŒ≤).succ
  lit_succ := (ùîæ_dim ‚ÑçŒ± ‚ÑçŒ≤).lit_succ
  prg_succ := (ùîæ_dim ‚ÑçŒ± ‚ÑçŒ≤).prg_succ
  colouring := (ùîæ_dim ‚ÑçŒ± ‚ÑçŒ≤).colouring
  monochrome := (ùîæ_dim ‚ÑçŒ± ‚ÑçŒ≤).monochrome
  or_succ := (ùîæ_dim ‚ÑçŒ± ‚ÑçŒ≤).or_succ
  and_succ := (ùîæ_dim ‚ÑçŒ± ‚ÑçŒ≤).and_succ

  Œ©X := sorry
  LX := sorry
  andX := sorry


--  := ‚ü®
--   ùîæ_dim ‚ÑçŒ± ‚ÑçŒ≤,
--   ‚ü®inr ‚ÑçŒ≤.vF, inr_ne_inl‚ü©,
--   by simp only [ùîæ_dim, G_dim, ne_eq, Option.map_eq_map, Subtype.mk.injEq, not_false_eq_true],
--   LŒ©f _
-- ‚ü©

@[simp]
def H_union (HŒ± HŒ≤ : C2CP') : C2CP' where
  V := {x : Fin 1 ‚äï HŒ± ‚äï HŒ≤ // x ‚â† in‚ÇÇ HŒ≤.vF}
  V_fin := FinEnum.Subtype.finEnum (. ‚â† in‚ÇÇ HŒ≤.vF)

  E
  | ‚ü®in‚ÇÄ _, _‚ü©, ‚ü®in‚ÇÅ w, _‚ü© => w = HŒ±.vI
  | ‚ü®in‚ÇÄ _, _‚ü©, ‚ü®in‚ÇÇ w, _‚ü© => w = HŒ≤.vI
  | ‚ü®in‚ÇÅ v, _‚ü©, ‚ü®in‚ÇÅ w, _‚ü© => HŒ±.E v w
  | ‚ü®in‚ÇÇ v, _‚ü©, ‚ü®in‚ÇÇ w, _‚ü© => HŒ≤.E v w
  | ‚ü®in‚ÇÇ v, _‚ü©, ‚ü®in‚ÇÅ w, _‚ü© => HŒ≤.E v HŒ≤.vF ‚àß w = HŒ±.vF
  | _, _ => False

  E_dec
  | ‚ü®in‚ÇÄ _, _‚ü©, ‚ü®in‚ÇÄ _, _‚ü© => decidableFalse
  | ‚ü®in‚ÇÄ _, _‚ü©, ‚ü®in‚ÇÅ w, _‚ü© => decEq ..
  | ‚ü®in‚ÇÄ _, _‚ü©, ‚ü®in‚ÇÇ w, _‚ü© => decEq ..
  | ‚ü®in‚ÇÅ _, _‚ü©, ‚ü®in‚ÇÄ _, _‚ü© => decidableFalse
  | ‚ü®in‚ÇÅ v, _‚ü©, ‚ü®in‚ÇÅ w, _‚ü© => HŒ±.E_dec ..
  | ‚ü®in‚ÇÅ _, _‚ü©, ‚ü®in‚ÇÇ _, _‚ü© => decidableFalse
  | ‚ü®in‚ÇÇ _, _‚ü©, ‚ü®in‚ÇÄ _, _‚ü© => decidableFalse
  | ‚ü®in‚ÇÇ v, _‚ü©, ‚ü®in‚ÇÅ w, _‚ü© => @And.decidable (HŒ≤.E v HŒ≤.vF) (w = HŒ±.vF) (HŒ≤.E_dec v HŒ≤.vF) (decEq w HŒ±.vF)
  | ‚ü®in‚ÇÇ v, _‚ü©, ‚ü®in‚ÇÇ w, _‚ü© => HŒ≤.E_dec ..

  vI := ‚ü®in‚ÇÄ 0, inl_ne_inr‚ü©
  vF := ‚ü®in‚ÇÅ HŒ±.vF, by simp [in‚ÇÇ, in‚ÇÅ, ne_eq, inr.injEq, not_false_eq_true]‚ü©
  i_ne_f := @Subtype.ne_of_val_ne _ _ ‚ü®_, _‚ü© _ inl_ne_inr

def ‚Ñç_union (‚ÑçŒ± ‚ÑçŒ≤ : C2CP) : C2CP where
  toC2CF' := H_union ‚ÑçŒ± ‚ÑçŒ≤
  vF := ‚ü®in‚ÇÅ ‚ÑçŒ±.vF, by simp only [in‚ÇÅ, in‚ÇÇ, ne_eq, inr.injEq, not_false_eq_true]‚ü©
  i_ne_f := @Subtype.ne_of_val_ne _ _ ‚ü®_, _‚ü© _ inl_ne_inr

  L
  | ‚ü®in‚ÇÄ _, _‚ü© => .or
  | ‚ü®in‚ÇÅ v, _‚ü© => ‚ÑçŒ±.L v
  | ‚ü®in‚ÇÇ v, _‚ü© => ‚ÑçŒ≤.L v

  Œ©
  | ‚ü®in‚ÇÄ _, _‚ü© => .o
  | ‚ü®in‚ÇÅ v, _‚ü© => ‚ÑçŒ±.Œ© v
  | ‚ü®in‚ÇÇ v, _‚ü© => ‚ÑçŒ≤.Œ© v

  no_cm := sorry

  succ
  | ‚ü®in‚ÇÄ _, _‚ü© => none
  | ‚ü®in‚ÇÅ v, _‚ü© => (fun x => ‚ü®in‚ÇÅ x, by simp‚ü©) <$> ‚ÑçŒ±.succ v
  | ‚ü®in‚ÇÇ v, _‚ü© => match ‚ÑçŒ≤.succ v with
    | none => none
    | some w => dite (w ‚â† ‚ÑçŒ≤.vF)
      (some ‚ü®in‚ÇÇ w, by simp [.]‚ü©)
      (fun _ => some ‚ü®in‚ÇÅ ‚ÑçŒ±.vF, by simp‚ü©)


  lit_succ
  | ‚ü®in‚ÇÅ _, _‚ü©, ‚ü®in‚ÇÅ _, _‚ü©, p => ‚ÑçŒ±.lit_succ _ _ p
  | ‚ü®in‚ÇÇ _, _‚ü©, ‚ü®in‚ÇÇ _, _‚ü©, p => ‚ÑçŒ≤.lit_succ _ _ p
  | ‚ü®in‚ÇÇ _, _‚ü©, ‚ü®in‚ÇÅ _, _‚ü©, p => not_and_of_not_left _ (‚ÑçŒ≤.lit_succ _ _ p)
  | ‚ü®in‚ÇÅ _, _‚ü©, ‚ü®in‚ÇÄ _, _‚ü©, _ => not_false
  | ‚ü®in‚ÇÅ _, _‚ü©, ‚ü®in‚ÇÇ _, _‚ü©, _ => not_false
  | ‚ü®in‚ÇÇ _, _‚ü©, ‚ü®in‚ÇÄ _, _‚ü©, _ => not_false

  LŒ©f := ‚ÑçŒ±.LŒ©f

  colouring
  | ‚ü®in‚ÇÄ _, _‚ü© => trivial
  | ‚ü®in‚ÇÅ v, _‚ü© => ‚ÑçŒ±.colouring v
  | ‚ü®in‚ÇÇ v, _‚ü© => ‚ÑçŒ≤.colouring v

  monochrome := sorry

  Œ©X := sorry
  LX := sorry
  andX := sorry

  prg_succ
  | ‚ü®in‚ÇÅ _, _‚ü©, ‚ü®in‚ÇÅ _, _‚ü©, p => (by simp [‚ÑçŒ±.prg_succ _ _ p .])
  | ‚ü®in‚ÇÇ _, _‚ü©, ‚ü®in‚ÇÇ _, _‚ü©, p => have := ‚ÑçŒ≤.prg_succ _ _ p; by aesop
  | ‚ü®in‚ÇÇ _, _‚ü©, ‚ü®in‚ÇÅ _, _‚ü©, p => have := ‚ÑçŒ≤.prg_succ _ _ p; by aesop
  | ‚ü®in‚ÇÅ _, _‚ü©, ‚ü®in‚ÇÄ _, _‚ü©, _ => False.elim
  | ‚ü®in‚ÇÅ _, _‚ü©, ‚ü®in‚ÇÇ _, _‚ü©, _ => False.elim
  | ‚ü®in‚ÇÇ _, _‚ü©, ‚ü®in‚ÇÄ _, _‚ü©, _ => False.elim

  or_succ := sorry
  and_succ := sorry

-- @[simp]
def H_star (HŒ± : C2CP') : C2CP' where
  V := Fin 1 ‚äï HŒ±
  V_fin := FinEnum.sum

  E
  | inl _,  _     => False
  | inr v, inl _ => v = HŒ±.vF
  | inr v, inr w => (v = HŒ±.vF ‚àß w = HŒ±.vI) ‚à® HŒ±.E v w

  E_dec
  | inl _,  _    => decidableFalse
  | inr _, inl _ => decEq ..
  | inr _, inr _ => Or.decidable

  vI := inr HŒ±.vF
  vF := inl 0
  i_ne_f := inr_ne_inl

def ‚Ñç_star (‚ÑçŒ± : C2CP) : C2CP where
  toC2CF' := H_star ‚ÑçŒ±
  vF := inl 0
  i_ne_f := inr_ne_inl

  L
  | inl _ => .prop 0
  | inr v => if v = ‚ÑçŒ±.vF then .or else ‚ÑçŒ±.L v

  no_cm := sorry

  Œ©
  | inl _ => .o
  | inr v => if ‚ÑçŒ±.between v then .Œº else ‚ÑçŒ±.Œ© v

  LŒ©f := by simp only [H_star, and_self]

  lit_succ
  | inl _, _, _ => not_false
  | inr v, w, p => by
    by_contra a
    cases w
    . simp_all only [Label.lit, H_star, LŒ©f, ite_true]
    . simp only [H_star] at a
      apply @by_cases (v = ‚ÑçŒ±.vF) <;> intros <;> simp_all [‚ÑçŒ±.lit_succ, H_star]

  succ
  | inl _ => none
  | inr v => inr <$> ‚ÑçŒ±.succ v

  prg_succ
  | inr v, inl w, p => by intro; simp_all only [Label.prg, H_star, Option.map_eq_map,
    Option.map_eq_some', and_false, exists_const, LŒ©f, ite_true]
  | inr v, inr w, p => if v_eq_f : v = ‚ÑçŒ±.vF
    then by simp_all only [Label.prg, H_star, LŒ©f, ite_true]
    else by simp_all [‚ÑçŒ±.prg_succ v w _, H_star]

  or_succ := sorry
  and_succ := sorry

  monochrome := sorry
  colouring := sorry

  Œ©X := sorry
  LX := sorry
  andX := sorry


def H_test (GœÜ : C2CF') : C2CP' where
  V := Bool ‚äï GœÜ
  V_fin := FinEnum.sum

  E
  | inl v, inl w => v && !w
  | inl v, inr w => v && w = GœÜ.vI
  | inr _, inl _ => False
  | inr v, inr w => GœÜ.E v w

  E_dec
  | inl _, inl _ => decEq ..
  | inl _, inr _ => decEq ..
  | inr _, inl _ => decidableFalse
  | inr v, inr w => GœÜ.E_dec v w

  vI := inl true
  vF := inl false
  i_ne_f := Function.Injective.ne inl_injective Bool.noConfusion

def ‚Ñç_test (ùîæœÜ : C2CF) : C2CP where
  toC2CF' := H_test ùîæœÜ
  vF := inl false
  i_ne_f := Function.Injective.ne inl_injective Bool.noConfusion

  L
  | inl true  => .and
  | inl false => .prop 0
  | inr v     => ùîæœÜ.L v

  no_cm := sorry

  Œ©
  | inl _ => .o
  | inr v => ùîæœÜ.Œ© v

  LŒ©f := ‚ü®rfl, rfl‚ü©

  lit_succ := by simp_all [ùîæœÜ.lit_succ, H_test]

  succ
  | inl true  => some <|.inl false
  | inl false => none
  | inr v     => inr <$> ùîæœÜ.succ v

  prg_succ
  | inr _, inr _, p => fun a => (congr_arg _ (ùîæœÜ.prg_succ _ _ p a)).trans Option.map_coe
  | inr _, inl _, _ => False.elim

  or_succ := sorry
  and_succ := sorry

  colouring
  | .inl true => trivial
  | .inl false => trivial
  | .inr v => ùîæœÜ.colouring v

  monochrome := sorry

  Œ©X := sorry
  LX := sorry
  andX := sorry

open Program Formula

mutual
  def ToC2CP' : Program ‚Üí C2CP'
  | atom  n   => HA n
  | comp  Œ± Œ≤ => H_comp  (ToC2CP' Œ±) (ToC2CP' Œ≤)
  | union Œ± Œ≤ => H_union (ToC2CP' Œ±) (ToC2CP' Œ≤)
  | star  Œ±   => H_star  (ToC2CP' Œ±)
  | test  œÜ   => H_test  (ToC2CF' œÜ)

  def ToC2CF' : Formula ‚Üí C2CF'
  | prop  n  => G_p n
  | nprop n  => G_np n
  | .or  œÜ œà => G_or  (ToC2CF' œÜ) (ToC2CF' œà)
  | .and œÜ œà => G_and (ToC2CF' œÜ) (ToC2CF' œà)
  | dim  Œ± œÜ => G_dim (ToC2CP' Œ±) (ToC2CF' œÜ)
  | box  Œ± œÜ => G_box (ToC2CP' Œ±) (ToC2CF' œÜ)
end

mutual
  def ToC2CP : Program ‚Üí C2CP
  | atom  n    => ‚ÑçA n
  | comp  Œ± Œ≤  => ‚Ñç_comp  (ToC2CP Œ±) (ToC2CP Œ≤)
  | union Œ± Œ≤  => ‚Ñç_union (ToC2CP Œ±) (ToC2CP Œ≤)
  | star  Œ±    => ‚Ñç_star  (ToC2CP Œ±)
  | test  œÜ    => ‚Ñç_test  (ToC2CF œÜ)

  def ToC2CF : Formula ‚Üí C2CF
  | prop  n  => ùîæ_p n
  | nprop n  => ùîæ_np n
  | .or  œÜ œà => ùîæ_or  (ToC2CF œÜ) (ToC2CF œà)
  | .and œÜ œà => ùîæ_and (ToC2CF œÜ) (ToC2CF œà)
  | dim  Œ± œÜ => ùîæ_dim (ToC2CP Œ±) (ToC2CF œÜ)
  | box  Œ± œÜ => ùîæ_box (ToC2CP Œ±) (ToC2CF œÜ)
end

mutual
  lemma agreeP (œÄ : Program) : (ToC2CP œÄ).toC2CP' = ToC2CP' œÄ := by
    cases œÄ <;> simp only [ToC2CP, ToC2CP']
    case atom n    => rfl
    case comp Œ± Œ≤  => simp only [‚Üê agreeP Œ±, ‚Üê agreeP Œ≤]; rfl
    case union Œ± Œ≤ => simp only [‚Üê agreeP Œ±, ‚Üê agreeP Œ≤]; rfl
    case star Œ±    => simp only [‚Üê agreeP Œ±]; rfl
    case test œÜ    => simp only [‚Üê agreeF œÜ]; rfl

  lemma agreeF (f : Formula) : (ToC2CF f).toC2CF' = ToC2CF' f := by
    cases f <;> simp only [ToC2CF, ToC2CF']
    case prop    => rfl
    case nprop   => rfl
    case or œÜ œà  => simp only [‚Üê agreeF œÜ, ‚Üê agreeF œà]; rfl
    case and œÜ œà => simp only [‚Üê agreeF œÜ, ‚Üê agreeF œà]; rfl
    case dim Œ± œÜ => simp only [‚Üê agreeF œÜ, ‚Üê agreeP Œ±]; rfl
    case box Œ± œÜ => simp only [‚Üê agreeF œÜ, ‚Üê agreeP Œ±]; rfl
end

instance {G : C2CF'} : ToString G := ‚ü®toString ‚àò FinEnum.equiv‚ü©
-- instance {ùîæ : C2CF} : ToString ùîæ := ‚ü®toString ‚àò FinEnum.equiv‚ü©
-- instance : Repr C2CF := ‚ü®fun G _ => let l := FinEnum.toList G
--   s!"Vertices : {repr l}" ++ "\n" ++
--   s!"Labels   : {repr <| G.L <$> l}" ++ "\n" ++
--   s!"Colours  : {repr <| G.Œ© <$> l}" ++ "\n" ++
--   s!"Adj      : {repr <| (fun (v, w) => decide (G.E v w)) <$> FinEnum.toList (G √ó G) }"‚ü©


-- #eval ToC2CF (Formula.dim (Program.star (Program.star (Program.atom 1))) (Formula.prop 1))